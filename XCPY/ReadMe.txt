XCPY File Copy and Backup Utility
by David Ross Goben

XCPY is a user-interface that emulates the Xcopy DOS command, allowing the user to copy or backup a file or group of files or folders interactively. The application works by copying all files from within a source path to within a destination path. Hence, specifying a source folder will copy all the contents from WITHIN that folder, but not the folder itself, to WITHIN an EXISTING destination path or folder. This is important in typical backup scenarios. However, if you do wish to actually backup an actual source folder, then simply append a backslash to the folder path (for example, C:\Program Files\Data Folder\), or you can check the <Include Selected Path Folder in Copy> checkbox. Options to copy only modified files, only new files, to reset the archive flags on the files copied, and an option to include subdirectories are included. Also featured is a command line reporter that will generate a command line sequence, which you can enter into a shortcut that you can use to repeat the selected operation (backing up certain folders is a often-repeated practice). Or, you can simply have XPY generate a Desktop shortcut for you to support the selections you have made. If you have several archiveal operations that you would like to save in a batch file to run all at once, XCPY has another option to generate such a batch file, or append to an existing batch file. The shortcut or batch file will in turn invoke XCPY and supply it with the options that you had selected. When executed from a shortcut or batch file, each instance of XCPY will exit when it has completed its operation (Batch files can run numerous copies of XCPY simutaneously, speeding even complex data copying requirement). I originally wrote this utility to back up valuable proprietary company source code, reports, and databases to an archive server. It has been in heavy use in numerous offices for the past 12 years since then, allowing its users to initiate complete or modification-only backups of their data with a simple click of a mouse button. This project also demonstrates using an imbedded XP-Style Manifest from a Resource file (*.res). It also features an option to Xcopy the data into a ZIP file.

NOTE: If you choose to ZIP the data, be mindful that the freeware zip file interface is limited to only 1022 files (what do you want for free?). As such, multiple ZIP files may be automatically created, with the selected filename appended with "_1", "_2", etc. to accomodate your XCPY. Also be mindful that ZIPPING eats a LOT of resources to index data and calculate optimal compression schemes, and so it may take some time, and the application may appear to freeze or hang if you are one to sit there and watch it. As such, zip the data ONLY if you really need to. Multi-Gigabyte Flash Drives are becoming so cheap that this is normally a more economical and faster alternative for archiving important data. I buy 2GB SD cards for about $25 and insert them into a printer's card-reader slot, card-readers on multi-media computers, external card-reader interfaces, or use $10 USB Flash Drive adapters. If you do have huge archives, also consider XCPYing the data to a CD/RW or DVD/RW disc. Or, if you will need to compress the data even to save them to these alternate large volume media, you may also want to consider XCPYing the data to an inexpensive hard-disc add-on (large volume external USB drives are becoming very reasonably priced), and then use a professional zipping utility, such as WinZip to compress this data further (even using WinZip eats lots of resources, takes lots of time to compress, and may appear to freeze up or hang).

Version 2.3.13 corrected a last-minute enhancement in Version 2.3.12 that lost the history list if the utility was launched with command-line parameters. It also cleans up presentation of command line options. It also fixes log append flag confusion. Finally, it replaced the FSO.CopyFile option with the CopyFileA() API call for Win95/98/ME, and to CopyFileEX for NT/XP systems, allowing HUGE files to keep from appearing to freeze the system up, as the File System Object's CopyFile() method will do. The CopyFileEX() addition also demonstrates file progress callback invocation.

Version 2.3.14 made the icon display in the status bar much clearer.
